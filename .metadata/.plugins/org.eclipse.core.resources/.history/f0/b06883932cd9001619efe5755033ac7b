package be.condorcet.dao;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;

import be.condorcet.beans.Adresse;
import be.condorcet.beans.Utilisateur;

public class DAOAdresseIndesirable extends DAO {
	public DAOAdresseIndesirable() {
		super();
	}
	
	public boolean create (String adresse, String adresseInde)  {
		boolean create = true;
		CallableStatement statement = null;
		try {
			statement = connect.prepareCall("{call PROCEDURE_ADDADRESSEINDE(?,?,?)}");
			statement.setString(1, adresse);
			statement.setString(2, adresseInde);
			statement.registerOutParameter(3, Types.INTEGER);
			statement.execute();
			if (statement.getInt(3) == 1) {
				message = "Adresse déja existante !";
				create = false;
			}
		} catch (SQLException e) {
			message = "Problème de base de donnée !";
			create = false;
		}
		return create;
	}
	
	public ArrayList<String> find(Utilisateur utilisateur) {
		ArrayList<Adresse> adresses = null;
		try {
			CallableStatement statement = connect.prepareCall("{call PROCEDURE_ADRESSES(?,?)}");
			statement.setString(1, utilisateur.getPseudo());
			statement.registerOutParameter(2, Types.ARRAY, "TYPE_TABADRESSES");
			statement.execute();
			String[] tab = (String[]) statement.getArray(2).getArray();
			adresses = new ArrayList<>();
			for (String s : tab) {
				Adresse adresse = new Adresse();
				adresse.setAdresse(s);
				adresses.add(adresse);
			}
		} catch (SQLException e) {
			message = "Problème de base de donnée !";
		}
		return adresses;
	}
	
	public boolean delete (String adresse, String adresseInde) {
		boolean delete = true;
		CallableStatement statement = null;
		try {
			statement = connect.prepareCall("{call PROCEDURE_REMOVEADRESSEINDE(?, ?)}");
			statement.setString(1, adresse);
			statement.setString(2, adresseInde);
			statement.execute();
		} catch (SQLException e) {
			message = "Problème de base de donnée !";
			delete = false;
		}
		return delete;
	}
}


